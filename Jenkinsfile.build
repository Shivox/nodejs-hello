pipeline {
    agent {
        kubernetes-dev {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: agent
spec:
  containers:
  - name: docker
    image: docker:19-dind
    securityContext:
      privileged: true
    tty: true
    volumeMounts:
      - name: dind-storage
        mountPath: /var/lib/docker
  volumes:
  - name: dind-storage
    emptyDir: {}      
"""
        }
    }
    stages {
        stage("Checking out codebase") {
            steps {
                script {
                    checkout scm
                    config = readProperties file: 'Jenkinsfile.config'
                }
            }
        }
        stage("Building docker image") {
            steps {
                container("docker") {
                    codeBuild(
                        imageName: "${config.image_name}",
                        imageVersion: "${config.image_version}",
                        imageRegistry: "${config.image_registry}",
                        dockerFile: "${config.dockerfile_path}"
                    )
                }
            }                
        }
        stage("Publishing Docker image") {
            steps {
                container("docker") {
                    publishImage(
                        imageName: "${config.image_name}",
                        imageVersion: "${config.image_version}",
                        imageRegistry: "${config.image_registry}",
                        imageSecret: "${config.image_secret}",
                        imageUser: "${config.image_user}",
                        imageRegistryURL: "${config.image_registry_url}"
                    )
                }
            }
        }
    }
}

def codeBuild(Map stepParams) {
        def imageName = "${stepParams.imageName}".replace(" ", "")
        def imageTag = "${stepParams.imageVersion}-${env.BUILD_ID}".replace(" ", "")
        sh "docker build -t ${stepParams.imageRegistry}/${imageName}:${imageTag} -f ${stepParams.dockerFile} ."
}

def publishImage(Map stepParams) {
    withCredentials([string(credentialsId: "${stepParams.imageSecret}", variable: 'tokenid')]) {
        def imageName = "${stepParams.imageName}".replace(" ", "")
        def imageTag = "${stepParams.imageVersion}-${env.BUILD_ID}".replace(" ", "")
        sh "docker login ${stepParams.imageRegistryURL} -u ${stepParams.imageUser} -p ${tokenid}"
        sh "docker tag ${stepParams.imageRegistry}/${imageName}:${imageTag} ${stepParams.imageRegistry}/${imageName}:latest"
        sh "docker push ${stepParams.imageRegistry}/${imageName}:${imageTag}"
        sh "docker push ${stepParams.imageRegistry}/${imageName}:latest"
        sh "docker rmi -f ${stepParams.imageRegistry}/${imageName}:${imageTag} ${stepParams.imageRegistry}/${imageName}:latest"
    }
}

config = null
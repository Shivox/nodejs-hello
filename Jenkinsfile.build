pipeline {
    agent {
        kubernetes {
            label "jenkins-agent"
            defaultContainer "docker"
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: agent
spec:
  containers:
  - name: docker
    image: docker:19-dind
    env:
    - name: DOCKER_HOST
      value: tcp://localhost:2375
    securityContext:
      privileged: true
    tty: true
    volumeMounts:
      - name: dind-storage
        mountPath: /var/lib/docker
  volumes:
  - name: dind-storage
    emptyDir: {}      
"""
        }
    }
    stages {
        stage("Checking out codebase") {
            steps {
                script {
                    checkout scm
                    config = readProperties file: 'Jenkinsfile.configuration'
                }
            }
        }
        stage("Building docker image") {
            steps {
                container("docker") {
                    codeBuild(
                        imageName: "${config.image_name}",
                        imageVersion: "${config.image_version}",
                        imageRegistry: "${config.image_registry}",
                        dockerFile: "${config.dockerfile_path}"
                    )
                }
            }                
        }
        stage("Publishing Docker image") {
            steps {
                container("docker") {
                    publishImage(
                        imageName: "${config.image_name}",
                        imageVersion: "${config.image_version}",
                        imageRegistry: "${config.image_registry}",
                        imageSecret: "${config.image_secret}",
                        imageUser: "${config.image_user}",
                        imageRegistryURL: "${config.image_registry_url}"
                    )
                }
            }
        }
    }
}

def codeBuild(Map stepParams) {
    try {
        stage("Building image for code") {
            def imageName = "${stepParams.imageName}-${env.BRANCH_NAME}".replace(" ", "")
            def imageTag = "${stepParams.imageVersion}-${env.BUILD_ID}".replace(" ", "")
            sh "docker build -t ${stepParams.imageRegistry}/${imageName}:${imageTag} -f ${stepParams.dockerFile} ."
        }
    } catch (Exception e) {
        echo "There is an error while building image. Please check the logs!!!!"
        echo e.toString()
        throw e
    }
}

def publishImage(Map stepParams) {
    try {
        stage("Publishing docker image to registry") {
            withCredentials([string(credentialsId: "${stepParams.imageSecret}", variable: 'tokenid')]) {
                def imageName = "${stepParams.imageName}-${env.BRANCH_NAME}".replace(" ", "")
                def imageTag = "${stepParams.imageVersion}-${env.BUILD_ID}".replace(" ", "")
                sh "docker login ${stepParams.imageRegistryURL} -u ${stepParams.imageUser} -p ${tokenid}"
                sh "docker tag ${stepParams.imageRegistry}/${imageName}:${imageTag} ${stepParams.imageRegistry}/${imageName}:latest"
                sh "docker push ${stepParams.imageRegistry}/${imageName}:${imageTag}"
                sh "docker push ${stepParams.imageRegistry}/${imageName}:latest"
                sh "docker rmi -f ${stepParams.imageRegistry}/${imageName}:${imageTag} ${stepParams.imageRegistry}/${imageName}:latest"
            }   
        }
    } catch (Exception e) {
        echo "Unable to push the image ${imageName}. Please check logs!!!!"
        echo e.toString()
        throw e
    }
}

config = null